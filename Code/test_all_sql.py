# test_all_sql.py (Final Corrected Version)

import pandas as pd
from pandasql import sqldf
import warnings

# Ignore warnings for a cleaner output
warnings.filterwarnings('ignore')

# This function lets pandasql see the DataFrames in our script
pysqldf = lambda q: sqldf(q, globals())

print("=====================================================")
print("  TESTING ALL 7 PRODUCTION SQL QUERIES (FINAL)")
print("=====================================================")

# --- Load all necessary datasets into memory ---
try:
    # This is the main dataframe used by most queries, generated by enhanced_main.py
    daily_scored_flights = pd.read_csv('final_flight_data.csv')
    print("✅ All data files loaded successfully.\n")
except FileNotFoundError as e:
    print(f"❌ ERROR: Could not find 'final_flight_data.csv'. Make sure you have run 'enhanced_main.py' first.")
    exit()

# --- DYNAMICALLY FIND A VALID DATE TO TEST ---
if not daily_scored_flights.empty:
    # Find the most common date in the dataset to ensure we have data to query
    valid_test_date = pd.to_datetime(daily_scored_flights['scheduled_departure_date_local']).dt.date.mode()[0]
    print(f"💡 Dynamically selected a valid test date from your data: {valid_test_date}\n")
else:
    print("❌ ERROR: 'final_flight_data.csv' is empty. Cannot proceed.")
    exit()


# --- QUERY 3: TOP 10 DIFFICULT FLIGHTS ALERT (FIXED) ---
print("\n--- 3. Running Query 3: Top 10 Difficult Flights Alert ---")
# FIX: Changed 'departure_time' to the correct column name 'scheduled_departure_datetime_local'
query_3 = f"""
SELECT 
    daily_rank,
    flight_number,
    scheduled_departure_station_code || ' -> ' || scheduled_arrival_station_code AS route,
    strftime('%H:%M', scheduled_departure_datetime_local) AS departure_time,
    difficulty_score,
    primary_driver
FROM daily_scored_flights
WHERE difficulty_class = 'Difficult' AND date(scheduled_departure_date_local) = '{valid_test_date}'
ORDER BY daily_rank
LIMIT 10;
"""
result_3 = pysqldf(query_3)
print("✅ Query 3 executed successfully.")
print("Sample Output (Top 10 Difficult Flights):")
print(result_3.to_string())


# --- QUERY 4: OPERATIONAL DASHBOARD METRICS ---
print("\n--- 4. Running Query 4: Operational Dashboard Metrics ---")
query_4 = f"""
SELECT 'Total Flights Today' AS metric, COUNT(*) AS value FROM daily_scored_flights WHERE date(scheduled_departure_date_local) = '{valid_test_date}' UNION ALL
SELECT 'Difficult Flights', COUNT(*) FROM daily_scored_flights WHERE difficulty_class = 'Difficult' AND date(scheduled_departure_date_local) = '{valid_test_date}' UNION ALL
SELECT 'Avg Difficulty Score', ROUND(AVG(difficulty_score), 1) FROM daily_scored_flights WHERE date(scheduled_departure_date_local) = '{valid_test_date}' UNION ALL
SELECT 'Flights with Tight Turns', SUM(insufficient_ground_time) FROM daily_scored_flights WHERE date(scheduled_departure_date_local) = '{valid_test_date}';
"""
result_4 = pysqldf(query_4)
print("✅ Query 4 executed successfully.")
print("Sample Output (Dashboard Metrics):")
print(result_4.to_string())


# --- QUERY 5: WEEKLY TREND ANALYSIS ---
print("\n--- 5. Running Query 5: Weekly Trend Analysis ---")
query_5 = """
SELECT 
    strftime('%Y-%W', scheduled_departure_date_local) AS week,
    COUNT(*) AS total_flights,
    SUM(CASE WHEN difficulty_class = 'Difficult' THEN 1 ELSE 0 END) AS difficult_flights,
    ROUND(AVG(difficulty_score), 1) AS avg_difficulty_score
FROM daily_scored_flights
GROUP BY 1 ORDER BY 1 DESC;
"""
result_5 = pysqldf(query_5)
print("✅ Query 5 executed successfully.")
print("Sample Output (Weekly Trends):")
print(result_5.to_string())


# --- QUERY 6: ROUTE-SPECIFIC DIFFICULTY PATTERNS ---
print("\n--- 6. Running Query 6: Route-Specific Difficulty ---")
query_6 = """
SELECT 
    scheduled_arrival_station_code AS destination,
    COUNT(*) AS total_flights,
    ROUND(AVG(difficulty_score), 1) AS avg_difficulty,
    SUM(CASE WHEN difficulty_class = 'Difficult' THEN 1 ELSE 0 END) AS difficult_count
FROM daily_scored_flights
GROUP BY 1
HAVING COUNT(*) >= 5
ORDER BY avg_difficulty DESC
LIMIT 10;
"""
result_6 = pysqldf(query_6)
print("✅ Query 6 executed successfully.")
print("Sample Output (Top 10 Difficult Routes):")
print(result_6.to_string())


# --- QUERY 7: PREDICTIVE ALERT SYSTEM ---
print("\n--- 7. Running Query 7: Predictive Alert System ---")
next_day = (valid_test_date + pd.Timedelta(days=1)).strftime('%Y-%m-%d')
query_7 = f"""
SELECT 
    flight_number,
    scheduled_departure_datetime_local,
    difficulty_score,
    '{{' ||
        '"tight_ground_time":' || CASE WHEN insufficient_ground_time = 1 THEN 'true' ELSE 'false' END || ',' ||
        '"high_load":' || CASE WHEN load_factor > 0.90 THEN 'true' ELSE 'false' END || ',' ||
        '"historical_delays":' || CASE WHEN historical_delay > 20 THEN 'true' ELSE 'false' END ||
    '}}' AS risk_factors
FROM daily_scored_flights
WHERE difficulty_class = 'Difficult' AND date(scheduled_departure_date_local) = '{next_day}'
ORDER BY difficulty_score DESC
LIMIT 5;
"""
result_7 = pysqldf(query_7)
print("✅ Query 7 executed successfully.")
print("Sample Output (Predictive Alerts for Difficult Flights):")
print(result_7.to_string())

print("\n=====================================================")
print("  ALL APPLICABLE SQL QUERIES TESTED SUCCESSFULLY")
print("=====================================================")